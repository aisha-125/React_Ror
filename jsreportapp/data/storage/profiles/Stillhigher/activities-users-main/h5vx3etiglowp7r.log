{"type":"operationStart","subtype":"profile","data":{"_id":"pjDPtpwrubk19YDX","timestamp":"2024-01-12T15:59:25.273Z","state":"queued","mode":"standard","creationDate":"2024-01-12T15:59:25.274Z","modificationDate":"2024-01-12T15:59:25.274Z","shortid":"Y36MTFp","$entitySet":"profiles"},"doDiffs":false,"timestamp":1705075165274,"id":"24vf5xgtmw4uylf","previousOperationId":null,"operationId":"cpknzeuzq44zul3"}
{"type":"log","level":"info","message":"Render request 17 queued for execution and waiting for available worker","previousOperationId":"cpknzeuzq44zul3","timestamp":1705075165274,"id":"8nds1hmn0ilf6km"}
{"type":"operationStart","subtype":"render","name":"activities-users-main","previousOperationId":"cpknzeuzq44zul3","timestamp":1705075165279,"id":"ri4pcarvmoqgxoo","previousEventId":"24vf5xgtmw4uylf","operationId":"h2i9re2snhazixf"}
{"type":"log","timestamp":1705075165279,"level":"info","message":"Starting rendering request 17","meta":{"rootId":"h5vx3etiglowp7r","id":"h5vx3etiglowp7r"},"id":"4hpnqbs9y7z3eyo","previousOperationId":"h2i9re2snhazixf"}
{"type":"log","timestamp":1705075165279,"level":"info","message":"Rendering template { name: activities-users-main, recipe: chrome-pdf, engine: handlebars, preview: true }","meta":{"rootId":"h5vx3etiglowp7r","id":"h5vx3etiglowp7r"},"id":"wa3e79pivwawlpw","previousOperationId":"h2i9re2snhazixf"}
{"type":"log","timestamp":1705075165279,"level":"debug","message":"Data item not defined for this template.","meta":{"rootId":"h5vx3etiglowp7r","id":"h5vx3etiglowp7r"},"id":"16n0zi9mlb7ood8","previousOperationId":"h2i9re2snhazixf"}
{"type":"log","timestamp":1705075165280,"level":"debug","message":"Executing script users-script (beforeRender)","meta":{"rootId":"h5vx3etiglowp7r","id":"h5vx3etiglowp7r"},"id":"jyobfoq5fv5xx6v","previousOperationId":"h2i9re2snhazixf"}
{"type":"operationStart","subtype":"scriptsBeforeRender","name":"scripts beforeRender","timestamp":1705075165286,"id":"o1yd8y9mpfnktz8","previousEventId":"ri4pcarvmoqgxoo","operationId":"qgbc3gfwoj9jv00","previousOperationId":"h2i9re2snhazixf"}
{"type":"operationStart","subtype":"script","name":"scripts users-script","previousOperationId":"qgbc3gfwoj9jv00","timestamp":1705075165286,"id":"zqoi4inbvcekus9","previousEventId":"o1yd8y9mpfnktz8","operationId":"k9p8opsu04gwjku"}
{"type":"log","timestamp":1705075165287,"level":"debug","message":"(console:log) hora","meta":{"userLevel":true,"rootId":"h5vx3etiglowp7r","id":"h5vx3etiglowp7r"},"id":"l52fecl8g05mv1q","previousOperationId":"k9p8opsu04gwjku"}
{"type":"log","timestamp":1705075165289,"level":"warn","message":"Error when processing render request 17\n(because) error when evaluating custom script /Stillhigher/users-script\nProtocol \"http:\" not supported. Expected \"https:\"\n\n(sandbox.js line 7:15)\n\n   5 |     console.log('hora');\n   6 |     return new Promise((resolve, reject) => {\n>  7 |         https.get('http://localhost:4000/api/v1/activities',\n     |               ^\n   8 |         (result) => {\n   9 |             var str = '';\n  10 |             result.on('data', (b) => str += b);\n\n(sandbox.js line 6:12)\n\n  4 | function fetchActivities() {\n  5 |     console.log('hora');\n> 6 |     return new Promise((resolve, reject) => {\n    |            ^\n  7 |         https.get('http://localhost:4000/api/v1/activities',\n  8 |         (result) => {\n  9 |             var str = '';\n\n(sandbox.js line 52:33)\n\n  50 | // add jsreport hook which modifies the report input data\n  51 | async function beforeRender(req, res) {\n> 52 |     req.data.activities = await fetchActivities();\n     |                                 ^\n  53 | }\n\n(sandbox.js line 65:18)\nTypeError [ERR_INVALID_PROTOCOL]: Protocol \"http:\" not supported. Expected \"https:\"\n    at new NodeError (node:internal/errors:406:5)\n    at new ClientRequest (node:_http_client:183:11)\n    at request (node:https:378:10)\n    at Object.get (node:https:412:15)\n    at sandbox.js:7:15\n    at new Promise (<anonymous>)\n    at fetchActivities (sandbox.js:6:12)\n    at Object.beforeRender (sandbox.js:52:33)\n    at executionFn (/home/ruby/workspace/React_RoR/jsreportapp/node_modules/@jsreport/jsreport-scripts/lib/executeScript.js:67:35)\n    at sandbox.js:65:18","meta":{"rootId":"h5vx3etiglowp7r","id":"h5vx3etiglowp7r"},"id":"vv1hxy3pykt8k71","previousOperationId":"k9p8opsu04gwjku"}
{"type":"log","timestamp":1705075165289,"level":"warn","message":"Rendering request 17 finished with error in 16 ms","meta":{"rootId":"h5vx3etiglowp7r","id":"h5vx3etiglowp7r"},"id":"ywjeaspq14cacpj","previousOperationId":"k9p8opsu04gwjku"}
{"type":"error","timestamp":1705075165291,"code":"ERR_INVALID_PROTOCOL","statusCode":400,"weak":true,"decoratedSuffix":"\n\n(sandbox.js line 7:15)\n\n   5 |     console.log('hora');\n   6 |     return new Promise((resolve, reject) => {\n>  7 |         https.get('http://localhost:4000/api/v1/activities',\n     |               ^\n   8 |         (result) => {\n   9 |             var str = '';\n  10 |             result.on('data', (b) => str += b);\n\n(sandbox.js line 6:12)\n\n  4 | function fetchActivities() {\n  5 |     console.log('hora');\n> 6 |     return new Promise((resolve, reject) => {\n    |            ^\n  7 |         https.get('http://localhost:4000/api/v1/activities',\n  8 |         (result) => {\n  9 |             var str = '';\n\n(sandbox.js line 52:33)\n\n  50 | // add jsreport hook which modifies the report input data\n  51 | async function beforeRender(req, res) {\n> 52 |     req.data.activities = await fetchActivities();\n     |                                 ^\n  53 | }\n\n(sandbox.js line 65:18)","entity":{"shortid":"z0qYUNaQrV","name":"users-script","content":"const https = require('https');\n\n// call remote http rest api\nfunction fetchActivities() {\n    console.log('hora');\n    return new Promise((resolve, reject) => {\n        https.get('http://localhost:4000/api/v1/activities',\n        (result) => {\n            var str = '';\n            result.on('data', (b) => str += b);\n            result.on('error', reject);\n            result.on('end', () => resolve(JSON.parse(str).value));\n        });\n    });\n}\n\n// group the data for report\n// async function prepareDataSource() {\n//     const orders = await fetchOrders()\n//     const ordersByShipCountry = orders.reduce((a, v) => {\n//         a[v.ShipCountry] = a[v.ShipCountry] || []\n//         a[v.ShipCountry].push(v)\n//         return a\n//     }, {})\n\n//     return Object.keys(ordersByShipCountry).map((country) => {\n//         const ordersInCountry = ordersByShipCountry[country]\n\n//         const accumulated = {}\n\n//         ordersInCountry.forEach((o) => {\n//             o.OrderDate = new Date(o.OrderDate);\n//             const key = o.OrderDate.getFullYear() + '/' + (o.OrderDate.getMonth() + 1);\n//             accumulated[key] = accumulated[key] || {\n//                 value: 0,\n//                 orderDate: o.OrderDate\n//             };\n//             accumulated[key].value++;\n//         });\n\n//         return {\n//             rows: ordersInCountry,\n//             country,\n//             accumulated\n//         }\n\n//     }).slice(0, 2)\n// }\n\n// add jsreport hook which modifies the report input data\nasync function beforeRender(req, res) {\n    req.data.activities = await fetchActivities();\n}"},"property":"content","logged":true,"previousOperationId":"k9p8opsu04gwjku","id":"5gwjql39c3mln6p","stack":"TypeError [ERR_INVALID_PROTOCOL]: Protocol \"http:\" not supported. Expected \"https:\"\n    at new NodeError (node:internal/errors:406:5)\n    at new ClientRequest (node:_http_client:183:11)\n    at request (node:https:378:10)\n    at Object.get (node:https:412:15)\n    at sandbox.js:7:15\n    at new Promise (<anonymous>)\n    at fetchActivities (sandbox.js:6:12)\n    at Object.beforeRender (sandbox.js:52:33)\n    at executionFn (/home/ruby/workspace/React_RoR/jsreportapp/node_modules/@jsreport/jsreport-scripts/lib/executeScript.js:67:35)\n    at sandbox.js:65:18","message":"Error when evaluating custom script /Stillhigher/users-script\nProtocol \"http:\" not supported. Expected \"https:\"\n\n(sandbox.js line 7:15)\n\n   5 |     console.log('hora');\n   6 |     return new Promise((resolve, reject) => {\n>  7 |         https.get('http://localhost:4000/api/v1/activities',\n     |               ^\n   8 |         (result) => {\n   9 |             var str = '';\n  10 |             result.on('data', (b) => str += b);\n\n(sandbox.js line 6:12)\n\n  4 | function fetchActivities() {\n  5 |     console.log('hora');\n> 6 |     return new Promise((resolve, reject) => {\n    |            ^\n  7 |         https.get('http://localhost:4000/api/v1/activities',\n  8 |         (result) => {\n  9 |             var str = '';\n\n(sandbox.js line 52:33)\n\n  50 | // add jsreport hook which modifies the report input data\n  51 | async function beforeRender(req, res) {\n> 52 |     req.data.activities = await fetchActivities();\n     |                                 ^\n  53 | }\n\n(sandbox.js line 65:18)"}
